import React from 'react';
import { Template } from '../../../../types/sow';
import { MessageSquare, Sparkles, AlertCircle } from 'lucide-react';
import { useAIStore } from '../../../../store/aiStore';
import QuestionFlow from './QuestionFlow';
import Suggestions from './Suggestions';
import ModelSelector from './ModelSelector';

interface AIAssistantProps {
  template: Template;
  activeSection: number | null;
  onUpdateSection: (content: string) => void;
}

export default function AIAssistant({ template, activeSection, onUpdateSection }: AIAssistantProps) {
  const { messages, addMessage } = useAIStore();
  const [contextMessage, setContextMessage] = React.useState<string>('');

  React.useEffect(() => {
    if (activeSection !== null) {
      const section = template.sections[activeSection];
      setContextMessage(`Now editing: ${section.title} section`);
      addMessage({
        type: 'assistant',
        content: `I notice you're working on the ${section.title} section. How can I help you improve this section?`,
      });
    } else {
      setContextMessage('');
    }
  }, [activeSection]);

  const getSectionSpecificSuggestions = () => {
    if (activeSection === null) return [];
    
    const section = template.sections[activeSection];
    return [
      {
        text: `Suggest improvements for the ${section.title} section`,
        action: () => {
          addMessage({
            type: 'user',
            content: `Can you suggest improvements for the ${section.title} section?`,
          });
        },
      },
      {
        text: `Generate a detailed ${section.title} section`,
        action: () => {
          addMessage({
            type: 'user',
            content: `Can you generate a detailed ${section.title} section?`,
          });
        },
      },
    ];
  };

  return (
    <div className="h-full flex flex-col">
      <div className="p-4 bg-white border-b border-gray-200">
        <div className="flex justify-between items-center">
          <h2 className="text-lg font-medium text-gray-900">AI Assistant</h2>
          <ModelSelector />
        </div>
        {contextMessage && (
          <p className="mt-2 text-sm text-blue-600">{contextMessage}</p>
        )}
      </div>

      <div className="flex-1 overflow-y-auto p-6">
        <QuestionFlow />
        
        {activeSection !== null && (
          <div className="mt-4">
            <Suggestions suggestions={getSectionSpecificSuggestions()} />
          </div>
        )}

        <div className="space-y-4 mt-4">
          {messages.map((message, index) => (
            <div key={index} className={`flex items-start space-x-3 ${
              message.type === 'assistant' ? 'bg-blue-50 p-3 rounded-lg' : ''
            }`}>
              {message.type === 'assistant' ? (
                <Sparkles className="w-5 h-5 text-blue-600 mt-1" />
              ) : (
                <MessageSquare className="w-5 h-5 text-gray-600 mt-1" />
              )}
              <div className="flex-1">
                <p className="text-sm text-gray-800">{message.content}</p>
                {message.model && (
                  <span className="text-xs text-gray-500 mt-1 block">
                    Generated by {message.model}
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}